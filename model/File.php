<?php define("UPLOAD_ERR_EMPTY", 5);define("UPLOAD_ERR_NO_XML", 9);class File{	private $allowedMimeTypes = array('text/xml','application/xml','application/x-xml');	private $errorCode;    private $mimeType;	private $root;	private $recordsCount;	private $recordFields;	//	private $records;		public function __construct($file)    	{ 		//check file for errors first		if ($file['size'] == 0 ) 		{			$this->errorCode = UPLOAD_ERR_EMPTY;		}		else		{					$this->errorCode = $file['error']; 			$fileExtension = $this->readFileExtension($file['name']);			$this->mimeType = $this->readFileMimeType($file['tmp_name']);			//read the XML						$this->root = simplexml_load_file($file['tmp_name'], 'SimpleXMLElement', LIBXML_NOERROR);				$isFileReadable = ($this->root === false) ? false : true;			if($fileExtension != 'xml' || !in_array($this->mimeType, $this->allowedMimeTypes) || !$isFileReadable) 			{  				$this->errorCode = UPLOAD_ERR_NO_XML;			}						//if there are no errors...						if (!$this->hasError())			{				$this->recordsCount = $this->root->count();					if($this->recordsCount > 0)				{										//read what are the fields of a record					$this->recordFields = array();					$allRecords = $this->root->children();					$firstRecord = $allRecords[0];					foreach($firstRecord->children() as $field)					{						$fieldName = $field->getName();						$this->recordFields[] = $fieldName;					}									//save the file					$_SESSION['rootRecordAsXML'] = $this->root->asXML();					$_SESSION['recordsCount'] = $this->recordsCount;					$_SESSION['fieldsState'] = array();				}				else				{					$this->errorCode = UPLOAD_ERR_EMPTY;				}			}		}	}		private function readFileExtension($name)	{ 		$extension = end(explode('.', $name));		$extensionLowerCase = strtolower($extension);		return $extensionLowerCase;	}    	private function readFileMimeType($temp_name)	{        $finfo = finfo_open(FILEINFO_MIME_TYPE);        $mimeType = finfo_file($finfo, $temp_name);        finfo_close($finfo);				return $mimeType;	}		public function getRecordFields()	{		return $this->recordFields;	}		public function getRecordsCount()	{		return $this->recordsCount;	}			public function hasError()	{		return ($this->errorCode > 0);	}		public function getErrorCode()	{			return $this->errorCode;	}		public function getFileMimeType()	{		return $this->mimeType;	}}?>